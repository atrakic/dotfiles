#!/bin/bash

# adapted from jessfraz

# Bash wrappers for docker run commands

export DOCKER_REPO_PREFIX=jess

#
# Helper Functions
#
dcleanup(){
	local containers
	mapfile -t containers < <(docker ps -aq 2>/dev/null)
	docker rm "${containers[@]}" 2>/dev/null
	local volumes
	mapfile -t volumes < <(docker ps --filter status=exited -q 2>/dev/null)
	docker rm -v "${volumes[@]}" 2>/dev/null
	local images
	mapfile -t images < <(docker images --filter dangling=true -q 2>/dev/null)
	docker rmi "${images[@]}" 2>/dev/null
}
del_stopped(){
	local name=$1
	local state
	state=$(docker inspect --format "{{.State.Running}}" "$name" 2>/dev/null)

	if [[ "$state" == "false" ]]; then
		docker rm "$name"
	fi
}
rmctr(){
	# shellcheck disable=SC2068
	docker rm -f $@ 2>/dev/null || true
}
relies_on(){
	for container in "$@"; do
		local state
		state=$(docker inspect --format "{{.State.Running}}" "$container" 2>/dev/null)

		if [[ "$state" == "false" ]] || [[ "$state" == "" ]]; then
			echo "$container is not running, starting it for you."
			$container
		fi
	done
}
# creates an nginx config for a local route
nginx_config(){
	server=$1
	route=$2

	cat >"${HOME}/.nginx/conf.d/${server}.conf" <<-EOF
	upstream ${server} { server ${route}; }
	server {
	server_name ${server};

	location / {
	proxy_pass  http://${server};
	proxy_http_version 1.1;
	proxy_set_header Upgrade \$http_upgrade;
	proxy_set_header Connection "upgrade";
	proxy_set_header Host \$http_host;
	proxy_set_header X-Forwarded-Proto \$scheme;
	proxy_set_header X-Forwarded-For \$remote_addr;
	proxy_set_header X-Forwarded-Port \$server_port;
	proxy_set_header X-Request-Start \$msec;
}
	}
	EOF

	# restart nginx
	docker restart nginx

	# add host to /etc/hosts
	#hostess add "$server" 127.0.0.1

	# open browser
	#browser-exec "http://${server}"
}

#
# Container Aliases
#

local-registry(){
  local DOCKER=local-registry
	del_stopped $DOCKER
  docker volume create "${DOCKER}"-data
  docker run -d \
    --name $DOCKER \
    --restart always \
    -v "${DOCKER}"-data:/var/lib/registry \
    -p 5000:5000 \
    registry:2
  #usage:
  #docker pull nginx:latest
  #docker tag nginx:latest $DOCKER:5000/nginx:latest
  #docker push $DOCKER:5000/nginx:latest
}
alias local-registry-ip="echo $(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' local-registry)"

cadvisor(){
  docker run -d \
    --restart always \
    --name cadvisor \
    -v /:/rootfs:ro \
    -v /var/run:/var/run:rw \
    -v /sys:/sys:ro  \
    -v /var/lib/docker/:/var/lib/docker:ro \
    -p 1234:8080 \
    google/cadvisor

  echo "$(docker inspect --format '{{.NetworkSettings.Networks.bridge.IPAddress}}' cadvisor)"
}
nginx(){
  del_stopped nginx
  docker run -d \
    --restart always \
    -v "${HOME}/.nginx:/etc/nginx" \
    --net host \
    --name nginx \
    nginx

  # add domain to hosts & open nginx
  #sudo hostess add jess 127.0.0.1
}
evergreen(){
  local DOCKER=evergreen
  del_stopped $DOCKER
  docker volume create "${DOCKER}"-data
  docker run -it -d \
    --name "$DOCKER" \
    -p 8080:8080 \
    -p 5000:5000 \
    -v $(which docker):/bin/docker \
    -v "$HOME":/home \
    -v "${DOCKER}"-data:/${DOCKER}/data/ \
    -v /var/run/docker.sock:/var/run/docker.sock \
    -e LOG_LEVEL=debug \
    jenkins/$DOCKER:docker-cloud
#    -v "$(pwd)/seed":/var/jenkins_home/workspace/seed \
# docker exec $DOCKER cat /evergreen/data/jenkins/home/secrets/initialAdminPassword
}
terraforming() {
  local DOCKER=terraforming
  docker run --rm -it \
  -e "AWS_ACCESS_KEY_ID=$(aws configure get aws_access_key_id)" \
  -e "AWS_SECRET_ACCESS_KEY=$(aws configure get aws_secret_access_key)" \
  -e "AWS_DEFAULT_REGION=$(aws configure get region)" \
   quay.io/dtan4/terraforming:latest terraforming "$@"
}
portainer(){
  local DOCKER=portainer
	del_stopped $DOCKER
  docker volume create "${DOCKER}"-data
  docker run -it -d \
    --label "$DOCKER" \
    --name "$DOCKER" \
    -p 9000:9000 \
    -v "/var/run/docker.sock:/var/run/docker.sock" \
    -v "${DOCKER}"-data:/data \
  portainer/portainer
}
minimal-notebook(){
  local DOCKER=minimal-notebook
	del_stopped $DOCKER
  docker pull jupyter/$DOCKER
  #docker volume create "${DOCKER}"-data
  docker run -it -d \
      --name "$DOCKER" \
      --rm \
      -p 8080:8080 \
      -v "$HOME":/home \
      jupyter/$DOCKER
}
terraform-light(){
  docker run -it --rm \
  -v "${HOME}:${HOME}:ro" \
  -v /tmp:/tmp \
  --volume "$(pwd):/terraform" \
  --workdir "/terraform" \
  -e "AWS_ACCESS_KEY_ID=$(aws configure get aws_access_key_id)" \
  -e "AWS_SECRET_ACCESS_KEY=$(aws configure get aws_secret_access_key)" \
  -e "AWS_DEFAULT_REGION=$(aws configure get region)" \
  -e SSH_AUTH_SOCK \
  "hashicorp/terraform:light" "$@"
}
alias tf="terraform-light"
pgadmin4() {
  local DOCKER=pgadmin4
	del_stopped $DOCKER
  docker volume create "${DOCKER}"-data
  docker pull dpage/pgadmin4
  docker run -it -d \
    --name "$DOCKER" \
    -e "PGADMIN_DEFAULT_EMAIL=user@domain.com" \
    -e "PGADMIN_DEFAULT_PASSWORD=SuperSecret" \
    -p 8081:80 \
    -v "$HOME":/home \
    -v "${DOCKER}"-data:/var/lib/pgadmin \
    dpage/$DOCKER
  echo "http://www.postgresqltutorial.com/"
}
phpmyadmin(){
  local DOCKER=phpmyadmin
	del_stopped $DOCKER
  docker pull phpmyadmin/${DOCKER}
  docker volume create "${DOCKER}"-data
  docker run -it -d \
    --name "$DOCKER" \
    -e "PMA_ARBITRARY=1" \
    -e "MYSQL_ROOT_PASSWORD" \
    -e "MYSQL_USER" \
    -e "MYSQL_PASSWORD" \
    -p "8080:80" \
    -v "${DOCKER}"-data:/sessions \
  phpmyadmin/${DOCKER}
}
alias mysqladmin="phpmyadmin"
netdata(){
  local DOCKER=netdata
	del_stopped $DOCKER
  docker run -d --name=$DOCKER \
  -p 19999:19999 \
  -v /etc/passwd:/host/etc/passwd:ro \
  -v /etc/group:/host/etc/group:ro \
  -v /proc:/host/proc:ro \
  -v /sys:/host/sys:ro \
  -v /var/run/docker.sock:/var/run/docker.sock:ro \
  --cap-add SYS_PTRACE \
  --security-opt apparmor=unconfined \
  netdata/netdata
}
unbound(){
  echo "sudo systemctl stop systemd-resolved.service"
  local DOCKER=unbound
	del_stopped $DOCKER
  docker run -d \
    --name $DOCKER \
    -p 8153:53/udp \
    --restart=always \
    mvance/unbound:latest
    #-v $(HOME)/.local/config/a-records.conf:/opt/unbound/etc/unbound/a-records.conf:ro \
}
pihole(){
  local DOCKER=pihole
  del_stopped $DOCKER

  relies_on unbound
  docker run -d \
    --name pihole \
    -p 53:53/tcp \
    -p 53:53/udp \
    -p 8182:80 \
    -p 8183:443 \
    -e TZ="Europe/Copenhagen" \
    -v "$(pwd)/etc-pihole/:/etc/pihole/" \
    -v "$(pwd)/etc-dnsmasq.d/:/etc/dnsmasq.d/" \
    --dns=127.0.0.1 \
    --dns=1.1.1.1 \
    --cap-add=NET_ADMIN \
    --restart=unless-stopped \
    pihole/pihole:latest
}
alias pihole-pass='docker logs pihole 2>/dev/null| grep random'
alias pihole-ip="echo $(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' pihole)"
alias pihole-url="echo https://$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' pihole)/admin/"
alias pihole-admin="xdg-open http://$(docker inspect -f '{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}' pihole)/admin/"
