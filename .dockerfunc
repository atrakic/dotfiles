#!/bin/bash

# adapted from jessfraz

# Bash wrappers for docker run commands

export DOCKER_REPO_PREFIX=jess

#
# Helper Functions
#
dcleanup(){
	local containers
	mapfile -t containers < <(docker ps -aq 2>/dev/null)
	docker rm "${containers[@]}" 2>/dev/null
	local volumes
	mapfile -t volumes < <(docker ps --filter status=exited -q 2>/dev/null)
	docker rm -v "${volumes[@]}" 2>/dev/null
	local images
	mapfile -t images < <(docker images --filter dangling=true -q 2>/dev/null)
	docker rmi "${images[@]}" 2>/dev/null
}
del_stopped(){
	local name=$1
	local state
	state=$(docker inspect --format "{{.State.Running}}" "$name" 2>/dev/null)

	if [[ "$state" == "false" ]]; then
		docker rm "$name"
	fi
}
rmctr(){
	# shellcheck disable=SC2068
	docker rm -f $@ 2>/dev/null || true
}
relies_on(){
	for container in "$@"; do
		local state
		state=$(docker inspect --format "{{.State.Running}}" "$container" 2>/dev/null)

		if [[ "$state" == "false" ]] || [[ "$state" == "" ]]; then
			echo "$container is not running, starting it for you."
			$container
		fi
	done
}
# creates an nginx config for a local route
nginx_config(){
	server=$1
	route=$2

	cat >"${HOME}/.nginx/conf.d/${server}.conf" <<-EOF
	upstream ${server} { server ${route}; }
	server {
	server_name ${server};

	location / {
	proxy_pass  http://${server};
	proxy_http_version 1.1;
	proxy_set_header Upgrade \$http_upgrade;
	proxy_set_header Connection "upgrade";
	proxy_set_header Host \$http_host;
	proxy_set_header X-Forwarded-Proto \$scheme;
	proxy_set_header X-Forwarded-For \$remote_addr;
	proxy_set_header X-Forwarded-Port \$server_port;
	proxy_set_header X-Request-Start \$msec;
}
	}
	EOF

	# restart nginx
	docker restart nginx

	# add host to /etc/hosts
	hostess add "$server" 127.0.0.1

	# open browser
	browser-exec "http://${server}"
}

#
# Container Aliases
#

evergreen(){
  local DOCKER=evergreen
	del_stopped $DOCKER
  docker volume create "${DOCKER}"-data
  docker run -it -d \
    --name "$DOCKER" \
    -p 8080:8080 \
    -p 5000:5000 \
    -v $(which docker):/bin/docker \
    -v "$HOME":/home \
    -v "${DOCKER}"-data:/${DOCKER}/data/ \
    -v /var/run/docker.sock:/var/run/docker.sock \
    -e LOG_LEVEL=debug \
    jenkins/$DOCKER:docker-cloud
#    -v "$(pwd)/seed":/var/jenkins_home/workspace/seed \
# docker exec $DOCKER cat /evergreen/data/jenkins/home/secrets/initialAdminPassword
}
terraforming() {
  docker run --rm -it \
  -e AWS_REGION=$AWS_DEFAULT_REGION  \
  -e AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID \
  -e AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY \
   quay.io/dtan4/terraforming:latest terraforming "$@"
}
portainer(){
  local DOCKER=portainer
	del_stopped $DOCKER
  docker volume create "${DOCKER}"-data
  docker run -it -d \
    --label "$DOCKER" \
    --name "$DOCKER" \
    -p 9000:9000 \
    -v "/var/run/docker.sock:/var/run/docker.sock" \
    -v "${DOCKER}"-data:/data \
  portainer/portainer
}
minimal-notebook(){
  local DOCKER=minimal-notebook
	del_stopped $DOCKER
  docker pull jupyter/$DOCKER
  #docker volume create "${DOCKER}"-data
  docker run -it -d \
      --name "$DOCKER" \
      --rm \
      -p 8080:8080 \
      -v "$HOME":/home \
      jupyter/$DOCKER
}
terraform-light(){
  local DOCKER=minimal-notebook
  docker run -it --rm \
  -v "${HOME}:${HOME}:ro" \
  -v /tmp:/tmp \
  --volume "$(pwd):/terraform" \
  --workdir "/terraform" \
  -e "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" \
  -e "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" \
  -e "AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION}" \
  -e SSH_AUTH_SOCK \
  "hashicorp/terraform:light" "$@"
}
pgadmin4() {
  local DOCKER=pgadmin4
	del_stopped $DOCKER
  docker volume create "${DOCKER}"-data
  docker pull dpage/pgadmin4
  docker run -it -d \
    --name "$DOCKER" \
    -e "PGADMIN_DEFAULT_EMAIL=user@domain.com" \
    -e "PGADMIN_DEFAULT_PASSWORD=SuperSecret" \
    -p 8081:80 \
    -v "$HOME":/home \
    -v "${DOCKER}"-data:/var/lib/pgadmin \
    dpage/$DOCKER
  echo "http://www.postgresqltutorial.com/"
}
phpmyadmin(){
  local DOCKER=phpmyadmin
	del_stopped $DOCKER
  docker pull phpmyadmin/${DOCKER}
  docker volume create "${DOCKER}"-data
  docker run -it -d \
    --name "$DOCKER" \
    -e "PMA_ARBITRARY=1" \
    -e "MYSQL_ROOT_PASSWORD" \
    -e "MYSQL_USER" \
    -e "MYSQL_PASSWORD" \
    -p "8080:80" \
    -v "${DOCKER}"-data:/sessions \
  phpmyadmin/${DOCKER}
}
alias mysqladmin="phpmyadmin"
